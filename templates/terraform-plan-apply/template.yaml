# Run terraform init and terraform plan
parameters:
  - name: 'DOMAIN_NAME'
    displayName: '(Required) Domain name.'
    type: string
  - name: 'AZURE_DEVOPS_POOL_AGENT_NAME'
    displayName: '(Required) Azure devops agent name.'
    type: string
  - name: 'AZURE_SERVICE_CONNECTION_NAME'
    displayName: '(Required) Azure service connection name.'
    type: string
  - name: 'ENVIRONMENT'
    displayName: '(Required) Environment to apply to. Possible values are [dev|uat|prod] etc.'
    type: string
  - name: 'WORKINGDIR'
    displayName: '(Optional) Working direcory containing terraform templates and the terraform.sh helper.'
    type: string
    default: "src"
  - name: 'AKS_NAME'
    displayName: '(Optional) AKS Name'
    type: string
    default: ""
  - name: 'AKS_API_SERVER_URL'
    displayName: '(Optional) AKS api server url like (e.g. https://my-url.com:443)'
    type: string
    default: ""
  - name: 'AKS_AZURE_DEVOPS_SA_CA_CRT'
    displayName: '(Optional) AKS service account CA cert, used by azure devops account'
    type: string
    default: ""
  - name: 'AKS_AZURE_DEVOPS_SA_TOKEN'
    displayName: '(Optional) AKS service account token, used by azure devops account'
    type: string
    default: ""


stages:
  - stage: ${{parameters.ENVIRONMENT}}_tf_plan_${{parameters.DOMAIN_NAME}}
    dependsOn: []
    condition: succeeded()
    pool:
      name: ${{parameters.AZURE_DEVOPS_POOL_AGENT_NAME}}
    jobs:
      #
      # rtd_common
      #
      - job: tf_plan
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform
          - template: ../terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              ENVIRONMENT: ${{parameters.ENVIRONMENT}}
              WORKINGDIR: ${{parameters.WORKINGDIR}}
              AZURE_SERVICE_CONNECTION_NAME: ${{parameters.AZURE_SERVICE_CONNECTION_NAME}}

  - stage: ${{parameters.ENVIRONMENT}}_tf_apply_${{parameters.DOMAIN_NAME}}
    dependsOn: ['${{parameters.ENVIRONMENT}}_tf_plan_${{parameters.DOMAIN_NAME}}']
    condition: succeeded()
    pool:
      name: ${{parameters.AZURE_DEVOPS_POOL_AGENT_NAME}}
    jobs:
      - deployment: tf_apply
        continueOnError: false
        environment: ${{parameters.ENVIRONMENT}}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 1. Install terraform
                - template: ../terraform-setup/template.yaml@terraform
                # 2. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    ENVIRONMENT: ${{parameters.ENVIRONMENT}}
                    WORKINGDIR: ${{parameters.WORKINGDIR}}
                    AZURE_SERVICE_CONNECTION_NAME: ${{parameters.AZURE_SERVICE_CONNECTION_NAME}}
                    AKS_NAME: ${{parameters.AKS_NAME}}
                    AKS_API_SERVER_URL: ${{parameters.AKS_API_SERVER_URL}}
                    AKS_AZURE_DEVOPS_SA_CA_CRT: ${{parameters.AKS_AZURE_DEVOPS_SA_CA_CRT}}
                    AKS_AZURE_DEVOPS_SA_TOKEN: ${{parameters.AKS_AZURE_DEVOPS_SA_TOKEN}}
